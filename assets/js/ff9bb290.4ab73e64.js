"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[277],{94108:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new Spring at the position and target specified, of type T.\\n```lua\\n-- Linear spring\\nlocal linearSpring = Spring.new(0)\\n-- Vector2 spring\\nlocal vector2Spring = Spring.new(Vector2.new(0, 0))\\n-- Vector3 spring\\nlocal vector3Spring = Spring.new(Vector3.new(0, 0, 0))\\n```","params":[{"name":"initial","desc":"The initial parameter is a number or Vector3 (anything with * number and addition/subtraction).","lua_type":"T"},{"name":"clock?","desc":"The clock function is optional, and is used to update the spring","lua_type":"() -> number"}],"returns":[{"desc":"","lua_type":"Spring<T>"}],"function_type":"static","source":{"line":38,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Impulse","desc":"Impulses the spring, increasing velocity by the amount given. This is useful to make something shake,\\nlike a Mac password box failing.","params":[{"name":"velocity","desc":"The velocity to impulse with","lua_type":"T"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":58,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"TimeSkip","desc":"Instantly skips the spring forwards by that amount time","params":[{"name":"delta","desc":"Time to skip forwards","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":67,"path":"src/Shared/Utilities/Spring.luau"}}],"properties":[{"name":"Position","desc":"The current position at the given clock time. Assigning the position will change the spring to have that position.\\n```lua\\nlocal spring = Spring.new(0)\\nprint(spring.Position) --\x3e 0\\n```","lua_type":"T","source":{"line":84,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"p","desc":"Alias for [Spring.Position](/api/Spring#Position)","lua_type":"T","source":{"line":89,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Velocity","desc":"The current velocity. Assigning the velocity will change the spring to have that velocity.\\n```lua\\nlocal spring = Spring.new(0)\\nprint(spring.Velocity) --\x3e 0\\n```","lua_type":"T","source":{"line":98,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"v","desc":"Alias for [Spring.Velocity](/api/Spring#Velocity)","lua_type":"T","source":{"line":103,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Target","desc":"The current target. Assigning the target will change the spring to have that target.\\n```lua\\nlocal spring = Spring.new(0)\\nprint(spring.Target) --\x3e 0\\n```","lua_type":"T","source":{"line":112,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"t","desc":"Alias for [Spring.Target](/api/Spring#Target)","lua_type":"T","source":{"line":117,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Damper","desc":"The current damper, defaults to 1. At 1 the spring is critically damped. At less than 1, it\\nwill be underdamped, and thus, bounce, and at over 1, it will be critically damped.","lua_type":"number","source":{"line":123,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"d","desc":"Alias for [Spring.Damper](/api/Spring#Damper)","lua_type":"number","source":{"line":128,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Speed","desc":"The speed, defaults to 1, but should be between [0, infinity)","lua_type":"number","source":{"line":133,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"s","desc":"Alias for [Spring.Speed](/api/Spring#Speed)","lua_type":"number","source":{"line":138,"path":"src/Shared/Utilities/Spring.luau"}},{"name":"Clock","desc":"The current clock object to syncronize the spring against.","lua_type":"() -> number","source":{"line":143,"path":"src/Shared/Utilities/Spring.luau"}}],"types":[],"name":"Spring","desc":"A physical model of a spring, useful in many applications.\\nA spring is an object that will compute based upon Hooke\'s law. Properties only evaluate\\nupon index making this model good for lazy applications.\\n```lua\\nlocal RunService = game:GetService(\\"RunService\\")\\nlocal UserInputService = game:GetService(\\"UserInputService\\")\\nlocal spring = Spring.new(Vector3.new(0, 0, 0))\\nRunService.RenderStepped:Connect(function()\\n\\tif UserInputService:IsKeyDown(Enum.KeyCode.W) then\\n\\t\\tspring.Target = Vector3.new(0, 0, 1)\\n\\telse\\n\\t\\tspring.Target = Vector3.new(0, 0, 0)\\n\\tend\\n\\tprint(spring.Position) -- A smoothed out version of the input keycode W\\nend)\\n```\\nA good visualization can be found here, provided by Defaultio:\\nhttps://www.desmos.com/calculator/hn2i9shxbz","source":{"line":22,"path":"src/Shared/Utilities/Spring.luau"}}')}}]);