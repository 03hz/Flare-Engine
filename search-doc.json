[{"title":"LayeredStateMachine","type":0,"sectionRef":"#","url":"/Flare-Engine/api/LayeredStateMachine","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"LayeredStateMachine","url":"/Flare-Engine/api/LayeredStateMachine#functions","content":" "},{"title":"CreateGroup​","type":1,"pageTitle":"LayeredStateMachine","url":"/Flare-Engine/api/LayeredStateMachine#CreateGroup","content":"&lt;/&gt; LayeredStateMachine:CreateGroup(Name: string) → NewGroup Creates a new state machine group used for layers.  "},{"title":"GetGroup​","type":1,"pageTitle":"LayeredStateMachine","url":"/Flare-Engine/api/LayeredStateMachine#GetGroup","content":"&lt;/&gt; LayeredStateMachine:GetGroup(Name: string) → NewGroup Gets a state machine group used for layers. local Group = LayeredStateMachine:GetGroup(&quot;Name&quot;)  "},{"title":"Maid","type":0,"sectionRef":"#","url":"/Flare-Engine/api/Maid","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid Constructs a new Maid object local maid = Maid.new()   "},{"title":"isMaid​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#isMaid","content":"&lt;/&gt; Maid.isMaid(value: any) → boolean Returns true if the class is a maid, and false otherwise. print(Maid.isMaid(Maid.new())) --&gt; true print(Maid.isMaid(nil)) --&gt; false   "},{"title":"Destroy​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#Destroy","content":"&lt;/&gt; Maid.Destroy() → () Alias for Maid.DoCleaning()  "},{"title":"__index​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#__index","content":"&lt;/&gt; Maid:__index(index: any) → MaidTask Returns Maid[key] if not part of Maid metatable local maid = Maid.new() maid._current = Instance.new(&quot;Part&quot;) print(maid._current) --&gt; Part maid._current = nil print(maid._current) --&gt; nil   "},{"title":"__newindex​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#__newindex","content":"&lt;/&gt; Maid:__newindex( index: any, newTask: MaidTask ) → () Add a task to clean up. Tasks given to a maid will be cleaned when maid[index] is set to a different value. Task cleanup is such that if the task is an event, it is disconnected. If it is an object, it is destroyed. Maid[key] = (function) Adds a task to perform Maid[key] = (event connection) Manages an event connection Maid[key] = (thread) Manages a thread Maid[key] = (Maid) Maids can act as an event connection, allowing a Maid to have other maids to clean up. Maid[key] = (Object) Maids can cleanup objects with a `Destroy` method Maid[key] = nil Removes a named task.   "},{"title":"GiveTask​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#GiveTask","content":"&lt;/&gt; Maid:GiveTask( task: MaidTask-- An item to clean ) → number-- taskId Gives a task to the maid for cleanup, but uses an incremented number as a key.  "},{"title":"GivePromise​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#GivePromise","content":"&lt;/&gt; Maid:GivePromise(promise: Promise&lt;T&gt;) → Promise&lt;T&gt; Gives a promise to the maid for clean.  "},{"title":"DoCleaning​","type":1,"pageTitle":"Maid","url":"/Flare-Engine/api/Maid#DoCleaning","content":"&lt;/&gt; Maid:DoCleaning() → () Cleans up all tasks and removes them as entries from the Maid. note Signals that are already connected are always disconnected first. After that any signals added during a cleaning phase will be disconnected at random times. tip DoCleaning() may be recursively invoked. This allows the you to ensure that tasks or other tasks. Each task will be executed once. However, adding tasks while cleaning is not generally a good idea, as if you add a function that adds itself, this will loop indefinitely. "},{"title":"Signal","type":0,"sectionRef":"#","url":"/Flare-Engine/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#functions","content":" "},{"title":"isSignal​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#isSignal","content":"&lt;/&gt; Signal.isSignal(value: any) → boolean Returns whether a class is a signal  "},{"title":"new​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal&lt;T&gt; Constructs a new signal.  "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire( ...: T-- Variable arguments to pass to handler ) → () Fire the event with the given arguments. All handlers will be invoked. Handlers follow  "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect( handler: (...T) → ()-- Function handler called when :Fire(...) is called ) → RBXScriptConnection  Connect a new handler to the event. Returns a connection object that can be disconnected.  "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → T Wait for fire to be called, and return the arguments it was given.  "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"/Flare-Engine/api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Disconnects all connected events to the signal. Voids the signal as unusable. Sets the metatable to nil. "},{"title":"TeleportServiceUtils","type":0,"sectionRef":"#","url":"/Flare-Engine/api/TeleportServiceUtils","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TeleportServiceUtils","url":"/Flare-Engine/api/TeleportServiceUtils#functions","content":" "},{"title":"promiseReserveServer​","type":1,"pageTitle":"TeleportServiceUtils","url":"/Flare-Engine/api/TeleportServiceUtils#promiseReserveServer","content":"&lt;/&gt; TeleportServiceUtils.promiseReserveServer(placeId: number) → Promise&lt;string&gt;-- Code Wraps TeleportService:ReserveServer(placeId)  "},{"title":"promiseTeleport​","type":1,"pageTitle":"TeleportServiceUtils","url":"/Flare-Engine/api/TeleportServiceUtils#promiseTeleport","content":"&lt;/&gt; TeleportServiceUtils.promiseTeleport( placeId: number, players: {Player }, teleportOptions: TeleportOptions ) → Promise&lt;string&gt;-- Code Wraps TeleportService:PromiseTeleport(placeId, players, teleportOptions) "},{"title":"FlareServer","type":0,"sectionRef":"#","url":"/Flare-Engine/api/FlareServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#types","content":" "},{"title":"self​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#self","content":"&lt;/&gt; type self = { CachedModules: typeof({}), RuntimeModules: typeof({}), GameSignals: {RBXScriptSignal } } Framework self type.  "},{"title":"FrameworkType​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#FrameworkType","content":"&lt;/&gt; type FrameworkType = typeof(setmetatable({}:: self,FlareServer)) Framework type.  "},{"title":"RequireType​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#RequireType","content":"&lt;/&gt; type RequireType = (ModuleScript | &quot;Maid&quot; | &quot;Network&quot; | &quot;Promise&quot; | &quot;Roact&quot; | &quot;Signal&quot; | &quot;Spring&quot;) → {} Framework type returned on FlareServer:GetModulesFromCache().  "},{"title":"BaseRuntimeModule​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#BaseRuntimeModule","content":"&lt;/&gt; type BaseRuntimeModule = { Init: (any?), Start: (any?) } Framework type used by runtime modules. "},{"title":"Properties​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#properties","content":" "},{"title":"CachedModules​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#CachedModules","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; FlareServer.CachedModules: {} Framework variable storing every single cached module.  "},{"title":"GameSignals​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#GameSignals","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; FlareServer.GameSignals: {} Framework variable storing framework signals. "},{"title":"Functions​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#functions","content":" "},{"title":"bootstrapGame​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#bootstrapGame","content":"This item only works when running on the server. Server &lt;/&gt; FlareServer.bootstrapGame() → FrameworkType? Flare-Engine Game Bootstrapper.  "},{"title":"gameIsLoaded​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#gameIsLoaded","content":"&lt;/&gt; FlareServer.gameIsLoaded() → boolean Returns if the game has loaded.  "},{"title":"GetModulesFromCache​","type":1,"pageTitle":"FlareServer","url":"/Flare-Engine/api/FlareServer#GetModulesFromCache","content":"&lt;/&gt; FlareServer:GetModulesFromCache() → RequireType Returns a function to require utilities and modules within framework. local require = Framework:GetModulesFromCache(); local Maid = require(&quot;Maid&quot;); local newMaid = Maid.new(); --&gt; Maid local Spring = require(&quot;Spring&quot;); local newSpring = Spring.new(); --&gt; Spring  "},{"title":"Spring","type":0,"sectionRef":"#","url":"/Flare-Engine/api/Spring","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#properties","content":" "},{"title":"Position​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Position","content":"&lt;/&gt; Spring.Position: T The current position at the given clock time. Assigning the position will change the spring to have that position. local spring = Spring.new(0) print(spring.Position) --&gt; 0   "},{"title":"p​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#p","content":"&lt;/&gt; Spring.p: T Alias for Spring.Position  "},{"title":"Velocity​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Velocity","content":"&lt;/&gt; Spring.Velocity: T The current velocity. Assigning the velocity will change the spring to have that velocity. local spring = Spring.new(0) print(spring.Velocity) --&gt; 0   "},{"title":"v​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#v","content":"&lt;/&gt; Spring.v: T Alias for Spring.Velocity  "},{"title":"Target​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Target","content":"&lt;/&gt; Spring.Target: T The current target. Assigning the target will change the spring to have that target. local spring = Spring.new(0) print(spring.Target) --&gt; 0   "},{"title":"t​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#t","content":"&lt;/&gt; Spring.t: T Alias for Spring.Target  "},{"title":"Damper​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Damper","content":"&lt;/&gt; Spring.Damper: number The current damper, defaults to 1. At 1 the spring is critically damped. At less than 1, it will be underdamped, and thus, bounce, and at over 1, it will be critically damped.  "},{"title":"d​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#d","content":"&lt;/&gt; Spring.d: number Alias for Spring.Damper  "},{"title":"Speed​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Speed","content":"&lt;/&gt; Spring.Speed: number The speed, defaults to 1, but should be between [0, infinity)  "},{"title":"s​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#s","content":"&lt;/&gt; Spring.s: number Alias for Spring.Speed  "},{"title":"Clock​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Clock","content":"&lt;/&gt; Spring.Clock: () → number The current clock object to syncronize the spring against. "},{"title":"Functions​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#new","content":"&lt;/&gt; Spring.new( initial: T,-- The initial parameter is a number or Vector3 (anything with * number and addition/subtraction). clock?: () → number-- The clock function is optional, and is used to update the spring ) → Spring&lt;T&gt; Constructs a new Spring at the position and target specified, of type T. -- Linear spring local linearSpring = Spring.new(0) -- Vector2 spring local vector2Spring = Spring.new(Vector2.new(0, 0)) -- Vector3 spring local vector3Spring = Spring.new(Vector3.new(0, 0, 0))   "},{"title":"Impulse​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#Impulse","content":"&lt;/&gt; Spring:Impulse( velocity: T-- The velocity to impulse with ) → () Impulses the spring, increasing velocity by the amount given. This is useful to make something shake, like a Mac password box failing.  "},{"title":"TimeSkip​","type":1,"pageTitle":"Spring","url":"/Flare-Engine/api/Spring#TimeSkip","content":"&lt;/&gt; Spring:TimeSkip( delta: number-- Time to skip forwards ) → () Instantly skips the spring forwards by that amount time "},{"title":"Promise","type":0,"sectionRef":"#","url":"/Flare-Engine/api/Promise","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#functions","content":" "},{"title":"isPromise​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#isPromise","content":"&lt;/&gt; Promise.isPromise(value: any) → boolean Determines whether a value is a promise or not.  "},{"title":"new​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#new","content":"&lt;/&gt; Promise.new(func: ( resolve: (...) → (), reject: (...) → () ) → ()?) → Promise&lt;T&gt; Constructs a new promise. ::warning Do not yield within this func callback, as it will yield on the main thread. This is a performance optimization. ::  "},{"title":"spawn​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#spawn","content":"&lt;/&gt; Promise.spawn(func: ( resolve: (...) → (), reject: (...) → () ) → ()?) → Promise&lt;T&gt; Initializes a new promise with the given function in a deferred wrapper.  "},{"title":"defer​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#defer","content":"&lt;/&gt; Promise.defer(func: ( resolve: (...) → (), reject: (...) → () ) → ()?) → Promise&lt;T&gt; Initializes a new promise with the given function in a deferred wrapper.  "},{"title":"resolved​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#resolved","content":"&lt;/&gt; Promise.resolved(...: Valuestoresolveto) → Promise&lt;T&gt; Returns a resolved promise with the following values  "},{"title":"rejected​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#rejected","content":"&lt;/&gt; Promise.rejected(...: Valuestorejectto) → Promise&lt;T&gt; Returns a rejected promise with the following values  "},{"title":"IsPending​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#IsPending","content":"&lt;/&gt; Promise:IsPending() → bool-- True if pending, false otherwise Returns whether or not the promise is pending  "},{"title":"IsFulfilled​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#IsFulfilled","content":"&lt;/&gt; Promise:IsFulfilled() → bool-- True if fulfilled Returns whether or not the promise is fulfilled  "},{"title":"IsRejected​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#IsRejected","content":"&lt;/&gt; Promise:IsRejected() → bool-- True if rejected Returns whether or not the promise is rejected  "},{"title":"Wait​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:Wait() → T Yields until the promise is complete, and errors if an error exists, otherwise returns the fulfilled results.  "},{"title":"Yield​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Yield","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Promise:Yield() → boolean,T Yields until the promise is complete, then returns a boolean indicating the result, followed by the values from the promise.  "},{"title":"Resolve​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Resolve","content":"&lt;/&gt; Promise:Resolve(...: T) → () Promise resolution procedure, resolves the given values  "},{"title":"Reject​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Reject","content":"&lt;/&gt; Promise:Reject( ...: T-- Params to reject with ) → () Rejects the promise with the values given  "},{"title":"Then​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Then","content":"&lt;/&gt; Promise:Then( onFulfilled: function,-- Called if/when fulfilled with parameters onRejected: function-- Called if/when rejected with parameters ) → Promise&lt;T&gt; Handlers if/when promise is fulfilled/rejected. It takes up to two arguments, callback functions for the success and failure cases of the Promise. May return the same promise if certain behavior is met. info We do not comply with 2.2.4 (onFulfilled or onRejected must not be called until the execution context stack contains only platform code). This means promises may stack overflow, however, it also makes promises a lot cheaper If/when promise is rejected, all respective onRejected callbacks must execute in the order of their originating calls to then. If/when promise is fulfilled, all respective onFulfilled callbacks must execute in the order of their originating calls to then.  "},{"title":"Tap​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Tap","content":"&lt;/&gt; Promise:Tap( onFulfilled: function, onRejected: function ) → Promise&lt;T&gt;-- Returns self Like then, but the value passed down the chain is the resolved value of the promise, not the value returned from onFulfilled or onRejected Will still yield for the result if a promise is returned, but will discard the result.  "},{"title":"Finally​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Finally","content":"&lt;/&gt; Promise:Finally(func: function) → Promise&lt;T&gt; Executes upon pending stop  "},{"title":"Catch​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Catch","content":"&lt;/&gt; Promise:Catch(onRejected: function) → Promise&lt;T&gt; Catch errors from the promise  "},{"title":"Destroy​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#Destroy","content":"&lt;/&gt; Promise:Destroy() → () Rejects the current promise. Utility left for Maid task  "},{"title":"GetResults​","type":1,"pageTitle":"Promise","url":"/Flare-Engine/api/Promise#GetResults","content":"&lt;/&gt; Promise:GetResults() → ( boolean,-- true if resolved, false otherwise. any ) Returns the results from the promise. warning This API surface will error if the promise is still pending. "}]